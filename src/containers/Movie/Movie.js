import React, { Component } from "react"
import "./movie.css"
import { NavBar } from './../../components/NavBar'
import { Footer } from './../../components/Footer'
import { Button, Card, CardBody, CardTitle, CardText } from 'mdbreact'
import { Navbar, NavbarBrand, NavbarNav, NavItem, NavLink, NavbarToggler, Collapse, Container } from 'mdbreact';
import { Form, Text, TextArea } from 'informed'
import Rating from 'react-rating'
import { Comment } from './Comment'
import API from "./../../services/apis"


export default class Movie extends Component {
  constructor(props) {
    super(props);
    this.state = {
      movie_id: this.props.match.params.movie_id,
      movie: {},
      comments: [],
      collapseID: [1,1,1,1,1,1,1,1,1,1],
      cines: []
    }
  }

  validateRequired = (value) => {
    return (!value) ? 'This field is required' : null;
  }

  toggleCollapse = key => () => {
    this.setState(prev => ({
      [key]: !prev[key]
    }))
  }

  renderCines = () => {
    if (!this.state.cines) return null;
    return this.state.cines.map((cine, index) => (
      <Navbar className="movie-cine" color="cyan lighten-5" light>
        <NavbarBrand>{cine.cine_group_name}</NavbarBrand>
        <NavbarToggler onClick={this.toggleCollapse("hide"+cine.cine_group_id)} />
        <Collapse id={"hide"+cine.cine_group_id} isOpen={this.state["hide"+cine.cine_group_id]} navbar>
          <NavbarNav left>
            <NavItem>
              {this.renderCine(cine.list_crawl_group)}
            </NavItem>
          </NavbarNav>
        </Collapse>
      </Navbar>
    ))
  }

  renderCine = (cineGroup) => {
    return cineGroup.map((cine) => (
      <Navbar className="movie-cine-child" color="grey lighten-5" light>
        <NavbarBrand>{cine.cine_name}</NavbarBrand>
        <NavbarToggler onClick={this.toggleCollapse("hide"+cine.cine_id)} />
        <Collapse id={"hide"+cine.cine_id} isOpen={this.state["hide"+cine.cine_id]} navbar>
          <NavbarNav left>
            <NavItem className="showtime-container">
              {this.renderShowtime(cine.showtime)}
            </NavItem>
          </NavbarNav>
        </Collapse>
      </Navbar>
    ))
  }

  renderShowtime = (showtimes) => {
    const time = new Date().toTimeString().split(' ')[0];
    return showtimes.map((showtime) => (
      <a href="#"
        className={"movie-showtime" + (time < showtime ? "" : " ended")}>
        {showtime}
      </a>
    ))
  }

  renderComments = () => {
    return this.state.comments.map((comment) => (
      <Comment comment={comment} />
    ))
  }

  fetchMovieById = () => {
    API.getMovieById(this.state.movie_id)
    .then((res) => {
      this.setState({movie: res})
    })
    .catch(err => console.log(err))
  }

  fetchMovieShowtime = () => {
    API.getMovieShowtime(this.state.movie_id)
    .then((res) => {
      this.setState({cines: res})
    })
    .catch(err => console.log(err))
  }

  fetchComments = () => {
    API.getComments(this.state.movie_id)
    .then((res) => {
      this.setState({comments: res})
    })
    .catch(err => console.log(err))
  }

  componentDidMount = () => {
    this.fetchMovieById();
    this.fetchMovieShowtime();
    this.fetchComments();
  }

  render() {
    return (
      <div className="movie">
        <NavBar />
        <div className="movie-header">
          <div className="movie-header-inner">
            <div className="movie-img">
            
            </div>
            <div className="movie-info">
              <h2 className="movie-name">{this.state.movie.name}</h2>
              <h3 className="movie-type">{this.state.movie.types}</h3>
              <div className="movie-props">
                <div className="movie-prop star">{this.state.movie.gmdb_rating}</div>
                <div className="movie-prop imdb">{this.state.movie.imdb_rating}</div>
                <div className="movie-prop limit">{this.state.movie.age_rated}</div>
                <div className="movie-prop duration">{this.state.movie.duration}</div>
              </div>
            </div>
          </div>
        </div>

        <div className="movie-ctn">
          <div className="row info">
          <Card className="movie-card">
            <CardBody>
              <CardTitle>Th√¥ng tin</CardTitle>
              <hr />

              <h5>üé• Trailer</h5>
              <iframe title="trailer"
                className="trailer-iframe"
                src="https://www.youtube.com/embed/WDkg3h8PCVU" 
                frameBorder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" 
                allowFullScreen>
              </iframe>

              <h5>üé• Gi·ªõi thi·ªáu</h5>
              <CardText>
              {/* {`Aquaman: ƒê·∫ø v∆∞∆°ng Atlantis (t√™n g·ªëc ti·∫øng Anh: Aquaman) l√† phim ƒëi·ªán ·∫£nh si√™u anh h√πng c·ªßa M·ªπ d·ª±a tr√™n nh√¢n v·∫≠t Aquaman c·ªßa DC Comics [7]. ƒê√¢y l√† ph·∫ßn phim th·ª© s√°u thu·ªôc DC Extended Universe, do James Wan ƒë·∫£m nhi·ªám vai tr√≤ ƒë·∫°o di·ªÖn, David Leslie Johnson-McGoldrick v√† Will Beall th·ª±c hi·ªán ph·∫ßn k·ªãch b·∫£n t·ª´ ph·∫ßn c·ªët truy·ªán c·ªßa Wan, Beall v√† Geoff Johns. Phim c√≥ s·ª± tham gia di·ªÖn xu·∫•t c·ªßa Jason Momoa trong vai nh√¢n v·∫≠t ch√≠nh, c√πng v·ªõi Amber Heard, Willem Dafoe, Patrick Wilson, Dolph Lundgren, Yahya Abdul-Mateen II v√† Nicole Kidman v√†o c√°c vai ph·ª•. ƒê√¢y c≈©ng l√† b·ªô phim ng∆∞·ªùi ƒë√≥ng th·ª© ba c√≥ s·ª± xu·∫•t hi·ªán c·ªßa nh√¢n v·∫≠t Aquaman, sau Batman ƒë·∫°i chi·∫øn Superman: √Ånh s√°ng c√¥ng l√Ω (2016) v√† Li√™n minh C√¥ng l√Ω (2017), v√† c≈©ng l√† phim ƒëi·ªán ·∫£nh ƒë·∫ßu ti√™n c√≥ n·ªôi dung xoay quanh nh√¢n v·∫≠t n√†y. Trong Aquaman: ƒê·∫ø v∆∞∆°ng Atlantis, Arthur Curry, ng∆∞·ªùi th·ª´a k·∫ø c·ªßa v∆∞∆°ng qu·ªëc d∆∞·ªõi ƒë√°y bi·ªÉn Atlantis, ph·∫£i th·ª±c hi·ªán nghƒ©a v·ª• tr·ªã v√¨ v∆∞∆°ng qu·ªëc c·ªßa m√¨nh v√† tr·ªü th√†nh m·ªôt si√™u anh h√πng c·ªßa c·∫£ hai th·∫ø gi·ªõi d∆∞·ªõi n∆∞·ªõc v√† tr√™n b·ªù trong khi Orm, ng∆∞·ªùi em trai c√πng m·∫π kh√°c cha c·ªßa Arthur ƒëang c·ªë g·∫Øng h·ª£p nh·∫•t b·∫£y v∆∞∆°ng qu·ªëc ƒë·ªÉ ch·ªëng l·∫°i th·∫ø gi·ªõi m·∫∑t ƒë·∫•t.`} */}
              {this.state.movie.description}
              </CardText>

              <h5>üé• Th·ªÉ lo·∫°i</h5>
              <CardText>
                {/* {`Kinh d·ªã`} */}
                {this.state.movie.types}
              </CardText>

              <h5>üé• C√°c di·ªÖn vi√™n ch√≠nh</h5>
              <CardText>
                {/* {`Alan walker, Truong Anh Quoc`} */}
                {this.state.movie.main_actors}
              </CardText>
            </CardBody>
          </Card>

          <Card className="movie-card">
            <CardBody>
              <CardTitle>L·ªãch chi·∫øu</CardTitle>
              <hr />
              {this.renderCines()}

            </CardBody>
          </Card>

          <Card className="movie-card">
            <CardBody>
              <CardTitle>B√¨nh ch·ªçn, ƒë√°nh gi√°</CardTitle>
              <hr />

              <Form className="rating-form"
                onSubmit={this.onSubmit}>
              {({ formState }) => (
                <div>
                  <h5>ƒê√°nh gi√° c·ªßa b·∫°n</h5>
                  <Rating 
                    className="rating-stars"
                    emptySymbol="fa fa-star-o fa-2x"
                    fullSymbol="fa fa-star fa-2x"
                  />
                  <Text type="text" field="name"
                    placeholder=" T√™n c·ªßa b·∫°n ..." 
                    className={"rate-form-input" + (formState.errors.name ? " error" : "")}
                    validate={this.validateRequired}/>
                  
                  <Text type="text" field="email"
                    placeholder=" Email ..." 
                    className={"rate-form-input" + (formState.errors.email ? " error" : "")}
                    validate={this.validateRequired}/>
                  
                  <TextArea field="comment"
                    placeholder=" B√¨nh lu·∫≠n ..." 
                    className={"rate-form-input" + (formState.errors.comment ? " error" : "")}
                    validate={this.validateRequired}/>

                  <Button color="yellow" type="submit">G·ª≠i b√¨nh lu·∫≠n</Button>
                </div>
                )}
              </Form>
              <hr />

              {
                this.renderComments()
              }
              
            </CardBody>
          </Card>
          </div>
        </div>

        <Footer />
      </div>
    )
  }
}